#!/usr/bin/env python
# -*- coding: UTF-8 -*
# Copyright (c) 2022 OceanBase
# OceanBase Diagnostic Tool is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#          http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.

"""
@time: 2022/11/29
@file: sql_meta.py
@desc:
"""


class GlobalSqlMeta:
    _sql_dict = {}

    def _init(self):
        global _sql_dict
        self._sql_dict = {}

    def set_value(self, key, value):
        self._sql_dict[key] = value

    def get_value(self, key):
        try:
            return self._sql_dict[key]
        except:
            print('get' + key + 'failed\r\n')

    def rm_value(self, key):
        try:
            return self._sql_dict.pop(key)
        except:
            print('delete' + key + 'failed\r\n')


sql_dict = GlobalSqlMeta()

sql_dict.set_value(
    "sql_audit_by_trace_id_limit1_mysql",
    '''
    select /*+ sql_audit */ 
    trace_id,
    query_sql,
    RETURN_ROWS,
    from_unixtime(REQUEST_TIME/1000000) REQUEST_TIME,
    from_unixtime((REQUEST_TIME + ELAPSED_TIME)/1000000) REQUEST_END_TIME,
    ELAPSED_TIME,
    TENANT_NAME,
    user_name,
    db_name,
    plan_id,
    tenant_id,
    version() mysql_version,
    svr_ip,
    svr_port
    from oceanbase.##REPLACE_SQL_AUDIT_TABLE_NAME##
    where query_sql != '' and is_inner_sql=0 and trace_id='##REPLACE_TRACE_ID##' order by REQUEST_TIME desc limit 1
    ''',
)

sql_dict.set_value(
    "sql_audit_by_trace_id_limit1_oracle",
    '''
    select * from 
    (select /*+ sql_audit */ 
    trace_id,
    query_sql, 
    RETURN_ROWS, 
    REQUEST_TIME, 
    REQUEST_TIME + ELAPSED_TIME REQUEST_END_TIME, 
    ELAPSED_TIME, 
    TENANT_NAME, 
    user_name, 
    db_name , 
    plan_id, 
    tenant_id,
    banner oracle_version, 
    svr_ip, 
    svr_port 
    from sys.##REPLACE_SQL_AUDIT_TABLE_NAME##, V$VERSION
    where length(query_sql)>4 and trace_id='##REPLACE_TRACE_ID##' order by REQUEST_TIME desc) where rownum < 2
    ''',
)

sql_dict.set_value(
    "sql_audit_item_mysql",
    '`SVR_IP`,`SVR_PORT`,`REQUEST_ID`,`SQL_EXEC_ID`,`TRACE_ID`,`SID`,`CLIENT_IP`,`CLIENT_PORT`,`TENANT_ID`,'
    '`EFFECTIVE_TENANT_ID`,`TENANT_NAME`,`USER_ID`,`USER_NAME`,`USER_CLIENT_IP`,`DB_ID`,`DB_NAME`,`SQL_ID`,'
    '`QUERY_SQL`,`PLAN_ID`,`AFFECTED_ROWS`,`RETURN_ROWS`,`PARTITION_CNT`,`RET_CODE`,`QC_ID`,`DFO_ID`,`SQC_ID`,'
    '`WORKER_ID`,`EVENT`,`P1TEXT`,`P1`,`P2TEXT`,`P2`,`P3TEXT`,`P3`,`LEVEL`,`WAIT_CLASS_ID`,`WAIT_CLASS`,`STATE`,'
    '`WAIT_TIME_MICRO`,`TOTAL_WAIT_TIME_MICRO`,`TOTAL_WAITS`,`RPC_COUNT`,`PLAN_TYPE`,`IS_INNER_SQL`,'
    '`IS_EXECUTOR_RPC`,`IS_HIT_PLAN`,`REQUEST_TIME`,`ELAPSED_TIME`,`NET_TIME`,`NET_WAIT_TIME`,`QUEUE_TIME`,'
    '`DECODE_TIME`,`GET_PLAN_TIME`,`EXECUTE_TIME`,`APPLICATION_WAIT_TIME`,`CONCURRENCY_WAIT_TIME`,'
    '`USER_IO_WAIT_TIME`,`SCHEDULE_TIME`,`ROW_CACHE_HIT`,`BLOOM_FILTER_CACHE_HIT`,`BLOCK_CACHE_HIT`,'
    '`BLOCK_INDEX_CACHE_HIT`,`DISK_READS`,`RETRY_CNT`,`TABLE_SCAN`,`CONSISTENCY_LEVEL`,`MEMSTORE_READ_ROW_COUNT`,'
    '`SSSTORE_READ_ROW_COUNT`,`REQUEST_MEMORY_USED`,`EXPECTED_WORKER_COUNT`,`USED_WORKER_COUNT`,`PS_STMT_ID`,'
    '`TRANSACTION_HASH`,`REQUEST_TYPE`,`IS_BATCHED_MULTI_STMT`,`OB_TRACE_INFO`,`PLAN_HASH` ',
)

sql_dict.set_value(
    "sql_audit_item_oracle",
    '"SVR_IP","SVR_PORT","REQUEST_ID","SQL_EXEC_ID","TRACE_ID","SID","CLIENT_IP","CLIENT_PORT","TENANT_ID",'
    '"EFFECTIVE_TENANT_ID","TENANT_NAME","USER_ID","USER_NAME","USER_CLIENT_IP","DB_ID","DB_NAME","SQL_ID",'
    '"QUERY_SQL","PLAN_ID","AFFECTED_ROWS","RETURN_ROWS","PARTITION_CNT","RET_CODE","QC_ID","DFO_ID","SQC_ID",'
    '"WORKER_ID","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","LEVEL","WAIT_CLASS_ID","WAIT_CLASS","STATE",'
    '"WAIT_TIME_MICRO","TOTAL_WAIT_TIME_MICRO","TOTAL_WAITS","RPC_COUNT","PLAN_TYPE","IS_INNER_SQL",'
    '"IS_EXECUTOR_RPC","IS_HIT_PLAN","REQUEST_TIME","ELAPSED_TIME","NET_TIME","NET_WAIT_TIME","QUEUE_TIME",'
    '"DECODE_TIME","GET_PLAN_TIME","EXECUTE_TIME","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME",'
    '"USER_IO_WAIT_TIME","SCHEDULE_TIME","ROW_CACHE_HIT","BLOOM_FILTER_CACHE_HIT","BLOCK_CACHE_HIT",'
    '"BLOCK_INDEX_CACHE_HIT","DISK_READS","RETRY_CNT","TABLE_SCAN","CONSISTENCY_LEVEL","MEMSTORE_READ_ROW_COUNT",'
    '"SSSTORE_READ_ROW_COUNT","REQUEST_MEMORY_USED","EXPECTED_WORKER_COUNT","USED_WORKER_COUNT","PS_STMT_ID",'
    '"TRANSACTION_HASH","REQUEST_TYPE","IS_BATCHED_MULTI_STMT","OB_TRACE_INFO","PLAN_HASH" ',
)

sql_dict.set_value(
    "sql_audit_item_mysql_obversion4",
    '`SVR_IP`,`SVR_PORT`,`REQUEST_ID`,`SQL_EXEC_ID`,`TRACE_ID`,`SID`,`CLIENT_IP`,`CLIENT_PORT`,`TENANT_ID`,'
    '`EFFECTIVE_TENANT_ID`,`TENANT_NAME`,`USER_ID`,`USER_NAME`,`USER_CLIENT_IP`,`DB_ID`,`DB_NAME`,`SQL_ID`,'
    '`QUERY_SQL`,`PLAN_ID`,`AFFECTED_ROWS`,`RETURN_ROWS`,`PARTITION_CNT`,`RET_CODE`,`QC_ID`,`DFO_ID`,`SQC_ID`,'
    '`WORKER_ID`,`EVENT`,`P1TEXT`,`P1`,`P2TEXT`,`P2`,`P3TEXT`,`P3`,`LEVEL`,`WAIT_CLASS_ID`,`WAIT_CLASS`,`STATE`,'
    '`WAIT_TIME_MICRO`,`TOTAL_WAIT_TIME_MICRO`,`TOTAL_WAITS`,`RPC_COUNT`,`PLAN_TYPE`,`IS_INNER_SQL`,'
    '`IS_EXECUTOR_RPC`,`IS_HIT_PLAN`,`REQUEST_TIME`,`ELAPSED_TIME`,`NET_TIME`,`NET_WAIT_TIME`,`QUEUE_TIME`,'
    '`DECODE_TIME`,`GET_PLAN_TIME`,`EXECUTE_TIME`,`APPLICATION_WAIT_TIME`,`CONCURRENCY_WAIT_TIME`,'
    '`USER_IO_WAIT_TIME`,`SCHEDULE_TIME`,`ROW_CACHE_HIT`,`BLOOM_FILTER_CACHE_HIT`,`BLOCK_CACHE_HIT`,'
    '`DISK_READS`,`RETRY_CNT`,`TABLE_SCAN`,`CONSISTENCY_LEVEL`,`MEMSTORE_READ_ROW_COUNT`,'
    '`SSSTORE_READ_ROW_COUNT`,`REQUEST_MEMORY_USED`,`EXPECTED_WORKER_COUNT`,`USED_WORKER_COUNT`,'
    '`TX_ID`,`REQUEST_TYPE`,`IS_BATCHED_MULTI_STMT`,`OB_TRACE_INFO`,`PLAN_HASH` ',
)

sql_dict.set_value(
    "sql_audit_item_oracle_obversion4",
    '"SVR_IP","SVR_PORT","REQUEST_ID","SQL_EXEC_ID","TRACE_ID","SID","CLIENT_IP","CLIENT_PORT","TENANT_ID",'
    '"EFFECTIVE_TENANT_ID","TENANT_NAME","USER_ID","USER_NAME","USER_CLIENT_IP","DB_ID","DB_NAME","SQL_ID",'
    '"QUERY_SQL","PLAN_ID","AFFECTED_ROWS","RETURN_ROWS","PARTITION_CNT","RET_CODE","QC_ID","DFO_ID","SQC_ID",'
    '"WORKER_ID","EVENT","P1TEXT","P1","P2TEXT","P2","P3TEXT","P3","LEVEL","WAIT_CLASS_ID","WAIT_CLASS","STATE",'
    '"WAIT_TIME_MICRO","TOTAL_WAIT_TIME_MICRO","TOTAL_WAITS","RPC_COUNT","PLAN_TYPE","IS_INNER_SQL",'
    '"IS_EXECUTOR_RPC","IS_HIT_PLAN","REQUEST_TIME","ELAPSED_TIME","NET_TIME","NET_WAIT_TIME","QUEUE_TIME",'
    '"DECODE_TIME","GET_PLAN_TIME","EXECUTE_TIME","APPLICATION_WAIT_TIME","CONCURRENCY_WAIT_TIME",'
    '"USER_IO_WAIT_TIME","SCHEDULE_TIME","ROW_CACHE_HIT","BLOOM_FILTER_CACHE_HIT","BLOCK_CACHE_HIT",'
    '"DISK_READS","RETRY_CNT","TABLE_SCAN","CONSISTENCY_LEVEL","MEMSTORE_READ_ROW_COUNT",'
    '"SSSTORE_READ_ROW_COUNT","REQUEST_MEMORY_USED","EXPECTED_WORKER_COUNT","USED_WORKER_COUNT",'
    '"TX_ID","REQUEST_TYPE","IS_BATCHED_MULTI_STMT","OB_TRACE_INFO","PLAN_HASH" ',
)

sql_dict.set_value(
    "sql_plan_monitor_dfo_op_oracle",
    '''
    SELECT
      AVG("ROWS") EST_ROWS, /*0 */
      plan_monitor.PLAN_DEPTH,
      plan_monitor.PLAN_LINE_ID,
      PLAN_OPERATION,
      COUNT(*) PARALLEL,
      MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME, /* 5 */
      MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
      MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
      MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
      MIN(FIRST_REFRESH_TS) MIN_FIRST_REFRESH_TS,
      MAX(LAST_REFRESH_TS) MAX_LAST_REFRESH_TS, /*10 */
      MIN(FIRST_CHANGE_TS) MIN_FIRST_CHANGE_TS,
      MAX(LAST_CHANGE_TS) MAX_LAST_CHANGE_TS,
      AVG(REFRESH_TS) AVG_REFRESH_TIME,
      MAX(REFRESH_TS) MAX_REFRESH_TIME,
      MIN(REFRESH_TS) MIN_REFRESH_TIME,/*15 */
      AVG(CHANGE_TS) AVG_CHANGE_TIME,
      MAX(CHANGE_TS) MAX_CHANGE_TIME,
      MIN(CHANGE_TS) MIN_CHANGE_TIME,
      SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
      SUM(STARTS) TOTAL_RESCAN_TIMES,/* 20 */
      MAX(OTHERSTAT_1_ID) OTHERSTAT_1_ID,
      SUM(OTHERSTAT_1_VALUE) SUM_STAT_1,
      MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
      MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
      AVG(OTHERSTAT_1_VALUE) AVG_STAT_1, /* 25 */
      MAX(OTHERSTAT_2_ID) OTHERSTAT_2_ID,
      SUM(OTHERSTAT_2_VALUE) SUM_STAT_2,
      MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
      MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
      AVG(OTHERSTAT_2_VALUE) AVG_STAT_2, /* 30 */
      MAX(OTHERSTAT_3_ID) OTHERSTAT_3_ID,
      SUM(OTHERSTAT_3_VALUE) SUM_STAT_3,
      MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
      MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
      AVG(OTHERSTAT_3_VALUE) AVG_STAT_3, /* 35 */
      MAX(OTHERSTAT_4_ID) OTHERSTAT_4_ID,
      SUM(OTHERSTAT_4_VALUE) SUM_STAT_4,
      MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
      MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
      AVG(OTHERSTAT_4_VALUE) AVG_STAT_4, /* 40 */
      MAX(OTHERSTAT_5_ID) OTHERSTAT_5_ID,
      SUM(OTHERSTAT_5_VALUE) SUM_STAT_5,
      MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
      MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
      AVG(OTHERSTAT_5_VALUE) AVG_STAT_5, /* 45*/
      MAX(OTHERSTAT_6_ID) OTHERSTAT_6_ID,
      SUM(OTHERSTAT_6_VALUE) SUM_STAT_6,
      MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
      MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
      AVG(OTHERSTAT_6_VALUE) AVG_STAT_6 /* 50 */
    FROM
    (
    select
      PLAN_DEPTH,
      PLAN_LINE_ID,
      PLAN_OPERATION,
      OUTPUT_ROWS,
      STARTS,
      FIRST_REFRESH_TIME,
      LAST_REFRESH_TIME,
      FIRST_CHANGE_TIME,
      LAST_CHANGE_TIME,
      OTHERSTAT_1_ID,
      OTHERSTAT_2_ID,
      OTHERSTAT_3_ID,
      OTHERSTAT_4_ID,
      OTHERSTAT_5_ID,
      OTHERSTAT_6_ID,
      OTHERSTAT_1_VALUE,
      OTHERSTAT_2_VALUE,
      OTHERSTAT_3_VALUE,
      OTHERSTAT_4_VALUE,
      OTHERSTAT_5_VALUE,
      OTHERSTAT_6_VALUE,
      24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_REFRESH_TS,
      24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_REFRESH_TS,
      24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_CHANGE_TS,
      24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_CHANGE_TS,
      24 * 3600 * extract(day FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 3600 * extract(hour FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 60 * extract(minute FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + extract(second FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) REFRESH_TS,
      24 * 3600 * extract(day FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 3600 * extract(hour FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 60 * extract(minute FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + extract(second FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) CHANGE_TS
    from
      sys.gv$sql_plan_monitor
      where
        trace_id = '##REPLACE_TRACE_ID##'
    
    ) plan_monitor
    LEFT JOIN
    (
     SELECT "ROWS", PLAN_LINE_ID FROM sys.##REPLACE_PLAN_EXPLAIN_TABLE_NAME## WHERE plan_id = ##REPLACE_PLAN_ID## AND tenant_id = ##REPLACE_TENANT_ID## and ip = '##REPLACE_SVR_IP##'  and port = ##REPLACE_SVR_PORT##
    ) plan_explain
    ON
      plan_monitor.PLAN_LINE_ID = plan_explain.PLAN_LINE_ID
    GROUP BY
      plan_monitor.PLAN_LINE_ID, PLAN_OPERATION, plan_monitor.PLAN_DEPTH
    ORDER BY
      plan_monitor.PLAN_LINE_ID ASC;
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_dfo_op_mysql",
    '''
        select
          AVG(ROWS) EST_ROWS, /*0*/
          plan_monitor.PLAN_DEPTH PLAN_DEPTH,
          plan_monitor.PLAN_LINE_ID PLAN_LINE_ID,
          PLAN_OPERATION,
          COUNT(*) PARALLEL,
          MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,/*5*/
          MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
          MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
          MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
          UNIX_TIMESTAMP(MIN(FIRST_REFRESH_TIME)) MIN_FIRST_REFRESH_TS,
          UNIX_TIMESTAMP(MAX(LAST_REFRESH_TIME)) MAX_LAST_REFRESH_TS, /*10*/
          UNIX_TIMESTAMP(MIN(FIRST_CHANGE_TIME)) MIN_FIRST_CHANGE_TS,
          UNIX_TIMESTAMP(MAX(LAST_CHANGE_TIME)) MAX_LAST_CHANGE_TS,
          AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) AVG_REFRESH_TIME,
          MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MAX_REFRESH_TIME,
          MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MIN_REFRESH_TIME, /*15 */
          AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) AVG_CHANGE_TIME,
          MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MAX_CHANGE_TIME,
          MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MIN_CHANGE_TIME,
          SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
          SUM(STARTS) TOTAL_RESCAN_TIMES,/* 20 */
          MAX(OTHERSTAT_1_ID) OTHERSTAT_1_ID,
          SUM(OTHERSTAT_1_VALUE) SUM_STAT_1,
          MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
          MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
          AVG(OTHERSTAT_1_VALUE) AVG_STAT_1, /* 25 */
          MAX(OTHERSTAT_2_ID) OTHERSTAT_2_ID,
          SUM(OTHERSTAT_2_VALUE) SUM_STAT_2,
          MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
          MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
          AVG(OTHERSTAT_2_VALUE) AVG_STAT_2, /* 30 */
          MAX(OTHERSTAT_3_ID) OTHERSTAT_3_ID,
          SUM(OTHERSTAT_3_VALUE) SUM_STAT_3,
          MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
          MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
          AVG(OTHERSTAT_3_VALUE) AVG_STAT_3, /* 35 */
          MAX(OTHERSTAT_4_ID) OTHERSTAT_4_ID,
          SUM(OTHERSTAT_4_VALUE) SUM_STAT_4,
          MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
          MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
          AVG(OTHERSTAT_4_VALUE) AVG_STAT_4, /* 40 */
          MAX(OTHERSTAT_5_ID) OTHERSTAT_5_ID,
          SUM(OTHERSTAT_5_VALUE) SUM_STAT_5,
          MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
          MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
          AVG(OTHERSTAT_5_VALUE) AVG_STAT_5, /* 45*/
          MAX(OTHERSTAT_6_ID) OTHERSTAT_6_ID,
          SUM(OTHERSTAT_6_VALUE) SUM_STAT_6,
          MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
          MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
          AVG(OTHERSTAT_6_VALUE) AVG_STAT_6 /* 50 */
        from
        (
          select * FROM oceanbase.gv$sql_plan_monitor
        where
          trace_id = '##REPLACE_TRACE_ID##'
        ) plan_monitor
        LEFT JOIN
        (
         SELECT ROWS, PLAN_LINE_ID FROM oceanbase.##REPLACE_PLAN_EXPLAIN_TABLE_NAME## WHERE plan_id = ##REPLACE_PLAN_ID## AND tenant_id = ##REPLACE_TENANT_ID## and ip = '##REPLACE_SVR_IP##'  and port = ##REPLACE_SVR_PORT##
        ) plan_explain
        ON
          plan_monitor.PLAN_LINE_ID = plan_explain.PLAN_LINE_ID
        GROUP BY
          plan_monitor.PLAN_LINE_ID, plan_monitor.PLAN_OPERATION
        ORDER BY
          plan_monitor.PLAN_LINE_ID ASC
        ''',
)

sql_dict.set_value(
    "sql_plan_monitor_svr_agg_template_oracle",
    '''
        SELECT
          PLAN_DEPTH,
          PLAN_LINE_ID,
          PLAN_OPERATION,
          COUNT(*) PARALLEL,
          MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,
          MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
          MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
          MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
          MIN(FIRST_REFRESH_TS) MIN_FIRST_REFRESH_TS,
          MAX(LAST_REFRESH_TS) MAX_LAST_REFRESH_TS,
          MIN(FIRST_CHANGE_TS) MIN_FIRST_CHANGE_TS,
          MAX(LAST_CHANGE_TS) MAX_LAST_CHANGE_TS,
          AVG(REFRESH_TS) AVG_REFRESH_TIME,
          MAX(REFRESH_TS) MAX_REFRESH_TIME,
          MIN(REFRESH_TS) MIN_REFRESH_TIME,
          AVG(CHANGE_TS) AVG_CHANGE_TIME,
          MAX(CHANGE_TS) MAX_CHANGE_TIME,
          MIN(CHANGE_TS) MIN_CHANGE_TIME,
          SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
          SUM(STARTS) TOTAL_RESCAN_TIMES,
          SVR_IP,
          SVR_PORT,
          MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
          MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
          AVG(OTHERSTAT_1_VALUE) AVG_STAT_1,
          MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
          MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
          AVG(OTHERSTAT_2_VALUE) AVG_STAT_2,
          MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
          MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
          AVG(OTHERSTAT_3_VALUE) AVG_STAT_3,
          MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
          MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
          AVG(OTHERSTAT_4_VALUE) AVG_STAT_4,
          MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
          MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
          AVG(OTHERSTAT_5_VALUE) AVG_STAT_5,
          MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
          MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
          AVG(OTHERSTAT_6_VALUE) AVG_STAT_6
        FROM
        (
        select
          PLAN_DEPTH,
          SVR_IP,
          SVR_PORT,
          PLAN_LINE_ID,
          PLAN_OPERATION,
          OUTPUT_ROWS,
          STARTS,
          FIRST_REFRESH_TIME,
          LAST_REFRESH_TIME,
          FIRST_CHANGE_TIME,
          LAST_CHANGE_TIME,
          OTHERSTAT_1_VALUE,
          OTHERSTAT_2_VALUE,
          OTHERSTAT_3_VALUE,
          OTHERSTAT_4_VALUE,
          OTHERSTAT_5_VALUE,
          OTHERSTAT_6_VALUE,
          24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_REFRESH_TS,
          24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_REFRESH_TS,
          24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_CHANGE_TS,
          24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_CHANGE_TS,
          24 * 3600 * extract(day FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 3600 * extract(hour FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 60 * extract(minute FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + extract(second FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) REFRESH_TS,
          24 * 3600 * extract(day FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 3600 * extract(hour FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 60 * extract(minute FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + extract(second FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) CHANGE_TS
        from
          sys.gv$sql_plan_monitor
          where
            trace_id = '##REPLACE_TRACE_ID##'
        ) tmp
        GROUP BY
          PLAN_LINE_ID,PLAN_OPERATION,PLAN_DEPTH,SVR_IP,SVR_PORT
        ORDER BY
          ##REPLACE_ORDER_BY##
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_svr_agg_template_mysql",
    '''
        select
          PLAN_DEPTH,
          PLAN_LINE_ID,
          PLAN_OPERATION,
          COUNT(*) PARALLEL,
          MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,
          MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
          MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
          MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
          UNIX_TIMESTAMP(MIN(FIRST_REFRESH_TIME)) MIN_FIRST_REFRESH_TS,
          UNIX_TIMESTAMP(MAX(LAST_REFRESH_TIME)) MAX_LAST_REFRESH_TS,
          UNIX_TIMESTAMP(MIN(FIRST_CHANGE_TIME)) MIN_FIRST_CHANGE_TS,
          UNIX_TIMESTAMP(MAX(LAST_CHANGE_TIME)) MAX_LAST_CHANGE_TS,
          AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) AVG_REFRESH_TIME,
          MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MAX_REFRESH_TIME,
          MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MIN_REFRESH_TIME,
          AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) AVG_CHANGE_TIME,
          MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MAX_CHANGE_TIME,
          MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MIN_CHANGE_TIME,
          SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
          SUM(STARTS) TOTAL_RESCAN_TIMES,
          SVR_IP,
          SVR_PORT,
          MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
          MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
          AVG(OTHERSTAT_1_VALUE) AVG_STAT_1,
          MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
          MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
          AVG(OTHERSTAT_2_VALUE) AVG_STAT_2,
          MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
          MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
          AVG(OTHERSTAT_3_VALUE) AVG_STAT_3,
          MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
          MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
          AVG(OTHERSTAT_4_VALUE) AVG_STAT_4,
          MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
          MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
          AVG(OTHERSTAT_5_VALUE) AVG_STAT_5,
          MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
          MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
          AVG(OTHERSTAT_6_VALUE) AVG_STAT_6
        from
          oceanbase.gv$sql_plan_monitor
        where
          trace_id = '##REPLACE_TRACE_ID##'
        GROUP BY
          PLAN_LINE_ID,PLAN_OPERATION,SVR_IP,SVR_PORT
        ORDER BY
          ##REPLACE_ORDER_BY##
        ''',
)

sql_dict.set_value(
    "sql_plan_monitor_detail_template_oracle",
    '''
        select
          PLAN_DEPTH, /*0*/
          SVR_IP,
          SVR_PORT,
          PROCESS_NAME,
          PLAN_LINE_ID,
          PLAN_OPERATION,/*5*/
          OUTPUT_ROWS,
          STARTS RESCAN_TIMES,
          FIRST_REFRESH_TIME,
          LAST_REFRESH_TIME,
          FIRST_CHANGE_TIME,/*10*/
          LAST_CHANGE_TIME,
          24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_REFRESH_TS,
          24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_REFRESH_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_REFRESH_TS,
          24 * 3600 * extract(day FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 3600 * extract(hour FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + 60 * extract(minute FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) + extract(second FROM LAST_REFRESH_TIME - FIRST_REFRESH_TIME) REFRESH_TS,
          24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM FIRST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) FIRST_CHANGE_TS, /*15*/
          24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) + extract(second FROM LAST_CHANGE_TIME - TO_DATE('1970-01-01', 'YYYY-MM-DD')) LAST_CHANGE_TS,
          24 * 3600 * extract(day FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 3600 * extract(hour FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + 60 * extract(minute FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) + extract(second FROM LAST_CHANGE_TIME - FIRST_CHANGE_TIME) CHANGE_TS,
          OTHERSTAT_1_ID,
          OTHERSTAT_1_VALUE,
          OTHERSTAT_2_ID,/*20*/
          OTHERSTAT_2_VALUE,
          OTHERSTAT_3_ID,
          OTHERSTAT_3_VALUE,
          OTHERSTAT_4_ID,
          OTHERSTAT_4_VALUE,/*25*/
          OTHERSTAT_5_ID,
          OTHERSTAT_5_VALUE,
          OTHERSTAT_6_ID,
          OTHERSTAT_6_VALUE
        FROM
          sys.gv$sql_plan_monitor
        WHERE
            trace_id = '##REPLACE_TRACE_ID##'
        ORDER BY
          ##REPLACE_ORDER_BY##
        ''',
)

sql_dict.set_value(
    "sql_plan_monitor_detail_template_mysql",
    '''
        select
          PLAN_DEPTH,/*0*/
          SVR_IP,
          SVR_PORT,
          PROCESS_NAME,
          PLAN_LINE_ID,
          PLAN_OPERATION, /*5*/
          OUTPUT_ROWS,
          STARTS RESCAN_TIMES,
          FIRST_REFRESH_TIME,
          LAST_REFRESH_TIME,
          FIRST_CHANGE_TIME,/*10*/
          LAST_CHANGE_TIME,
          UNIX_TIMESTAMP(FIRST_REFRESH_TIME) FIRST_REFRESH_TS,
          UNIX_TIMESTAMP(LAST_REFRESH_TIME) LAST_REFRESH_TS,
          UNIX_TIMESTAMP(LAST_REFRESH_TIME) - UNIX_TIMESTAMP(FIRST_REFRESH_TIME) REFRESH_TS,
          UNIX_TIMESTAMP(FIRST_CHANGE_TIME) FIRST_CHANGE_TS, /*15*/
          UNIX_TIMESTAMP(LAST_CHANGE_TIME) LAST_CHANGE_TS,
          UNIX_TIMESTAMP(LAST_CHANGE_TIME) - UNIX_TIMESTAMP(FIRST_CHANGE_TIME) CHANGE_TS,
          OTHERSTAT_1_ID,
          OTHERSTAT_1_VALUE,
          OTHERSTAT_2_ID, /*20*/
          OTHERSTAT_2_VALUE,
          OTHERSTAT_3_ID,
          OTHERSTAT_3_VALUE,
          OTHERSTAT_4_ID,
          OTHERSTAT_4_VALUE, /*25*/
          OTHERSTAT_5_ID,
          OTHERSTAT_5_VALUE,
          OTHERSTAT_6_ID,
          OTHERSTAT_6_VALUE
        from
          oceanbase.gv$sql_plan_monitor
        where
            trace_id = '##REPLACE_TRACE_ID##'
        ORDER BY
          ##REPLACE_ORDER_BY##
        ''',
)

sql_dict.set_value(
    "sql_plan_monitor_dfo_op_oracle_obversion4",
    '''
SELECT
  AVG("ROWS") EST_ROWS, /*0 */
  plan_monitor.PLAN_DEPTH,
  plan_monitor.PLAN_LINE_ID,
  PLAN_OPERATION,
  COUNT(*) PARALLEL,
  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME, /* 5 */
  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
  MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
  MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
  MIN(FIRST_REFRESH_TS) MIN_FIRST_REFRESH_TS,
  MAX(LAST_REFRESH_TS) MAX_LAST_REFRESH_TS, /*10 */
  MIN(FIRST_CHANGE_TS) MIN_FIRST_CHANGE_TS,
  MAX(LAST_CHANGE_TS) MAX_LAST_CHANGE_TS,
  AVG(REFRESH_TS) AVG_REFRESH_TIME,
  MAX(REFRESH_TS) MAX_REFRESH_TIME,
  MIN(REFRESH_TS) MIN_REFRESH_TIME,/*15 */
  AVG(CHANGE_TS) AVG_CHANGE_TIME,
  MAX(CHANGE_TS) MAX_CHANGE_TIME,
  MIN(CHANGE_TS) MIN_CHANGE_TIME,
  SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
  (MAX(LAST_CHANGE_TS-FIRST_CHANGE_TS) - MIN(LAST_CHANGE_TS-FIRST_CHANGE_TS)) / MAX(LAST_CHANGE_TS-FIRST_CHANGE_TS+0.000000001) SKEWNESS,
  SUM(STARTS) TOTAL_RESCAN_TIMES,/* 20 */
  MAX(OTHERSTAT_1_ID) OTHERSTAT_1_ID,
  SUM(OTHERSTAT_1_VALUE) SUM_STAT_1,
  MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
  MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
  AVG(OTHERSTAT_1_VALUE) AVG_STAT_1, /* 25 */
  MAX(OTHERSTAT_2_ID) OTHERSTAT_2_ID,
  SUM(OTHERSTAT_2_VALUE) SUM_STAT_2,
  MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
  MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
  AVG(OTHERSTAT_2_VALUE) AVG_STAT_2, /* 30 */
  MAX(OTHERSTAT_3_ID) OTHERSTAT_3_ID,
  SUM(OTHERSTAT_3_VALUE) SUM_STAT_3,
  MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
  MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
  AVG(OTHERSTAT_3_VALUE) AVG_STAT_3, /* 35 */
  MAX(OTHERSTAT_4_ID) OTHERSTAT_4_ID,
  SUM(OTHERSTAT_4_VALUE) SUM_STAT_4,
  MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
  MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
  AVG(OTHERSTAT_4_VALUE) AVG_STAT_4, /* 40 */
  MAX(OTHERSTAT_5_ID) OTHERSTAT_5_ID,
  SUM(OTHERSTAT_5_VALUE) SUM_STAT_5,
  MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
  MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
  AVG(OTHERSTAT_5_VALUE) AVG_STAT_5, /* 45*/
  MAX(OTHERSTAT_6_ID) OTHERSTAT_6_ID,
  SUM(OTHERSTAT_6_VALUE) SUM_STAT_6,
  MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
  MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
  AVG(OTHERSTAT_6_VALUE) AVG_STAT_6 /* 50 */,
  TRUNC(AVG(DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNC(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNC(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
FROM
(select
  PLAN_DEPTH,
  PLAN_LINE_ID,
  PLAN_OPERATION,
  OUTPUT_ROWS,
  STARTS,
  FIRST_REFRESH_TIME,
  LAST_REFRESH_TIME,
  FIRST_CHANGE_TIME,
  LAST_CHANGE_TIME,
  OTHERSTAT_1_ID,
  OTHERSTAT_2_ID,
  OTHERSTAT_3_ID,
  OTHERSTAT_4_ID,
  OTHERSTAT_5_ID,
  OTHERSTAT_6_ID,
  OTHERSTAT_1_VALUE,
  OTHERSTAT_2_VALUE,
  OTHERSTAT_3_VALUE,
  OTHERSTAT_4_VALUE,
  OTHERSTAT_5_VALUE,
  OTHERSTAT_6_VALUE,
  24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_REFRESH_TS,
  24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_REFRESH_TS,
  24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_CHANGE_TS,
  24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_CHANGE_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) REFRESH_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) CHANGE_TS,
DB_TIME,
USER_IO_WAIT_TIME
from
  sys.gv$sql_plan_monitor
  where
    trace_id = '##REPLACE_TRACE_ID##'

) plan_monitor
LEFT JOIN
(
 SELECT "ROWS", PLAN_LINE_ID FROM sys.##REPLACE_PLAN_EXPLAIN_TABLE_NAME## WHERE plan_id = ##REPLACE_PLAN_ID## AND tenant_id = ##REPLACE_TENANT_ID## and svr_ip = '##REPLACE_SVR_IP##'  and svr_port = ##REPLACE_SVR_PORT##
) plan_explain
ON
  plan_monitor.PLAN_LINE_ID = plan_explain.PLAN_LINE_ID
GROUP BY
  plan_monitor.PLAN_LINE_ID, PLAN_OPERATION, plan_monitor.PLAN_DEPTH
ORDER BY
  plan_monitor.PLAN_LINE_ID ASC;
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_dfo_op_mysql_obversion4",
    '''
select
  AVG(ROWS) EST_ROWS, /*0*/
  plan_monitor.PLAN_DEPTH PLAN_DEPTH,
  plan_monitor.PLAN_LINE_ID PLAN_LINE_ID,
  PLAN_OPERATION,
  COUNT(*) PARALLEL,
  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,/*5*/
  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
  MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
  MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
  UNIX_TIMESTAMP(MIN(FIRST_REFRESH_TIME)) MIN_FIRST_REFRESH_TS,
  UNIX_TIMESTAMP(MAX(LAST_REFRESH_TIME)) MAX_LAST_REFRESH_TS, /*10*/
  UNIX_TIMESTAMP(MIN(FIRST_CHANGE_TIME)) MIN_FIRST_CHANGE_TS,
  UNIX_TIMESTAMP(MAX(LAST_CHANGE_TIME)) MAX_LAST_CHANGE_TS,
  AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) AVG_REFRESH_TIME,
  MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MAX_REFRESH_TIME,
  MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MIN_REFRESH_TIME, /*15 */
  AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) AVG_CHANGE_TIME,
  MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MAX_CHANGE_TIME,
  MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MIN_CHANGE_TIME,
  SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
  (MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) - MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME))) / MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)+0.00000001) SKEWNESS,
  SUM(STARTS) TOTAL_RESCAN_TIMES,/* 20 */
  MAX(OTHERSTAT_1_ID) OTHERSTAT_1_ID,
  SUM(OTHERSTAT_1_VALUE) SUM_STAT_1,
  MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
  MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
  AVG(OTHERSTAT_1_VALUE) AVG_STAT_1, /* 25 */
  MAX(OTHERSTAT_2_ID) OTHERSTAT_2_ID,
  SUM(OTHERSTAT_2_VALUE) SUM_STAT_2,
  MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
  MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
  AVG(OTHERSTAT_2_VALUE) AVG_STAT_2, /* 30 */
  MAX(OTHERSTAT_3_ID) OTHERSTAT_3_ID,
  SUM(OTHERSTAT_3_VALUE) SUM_STAT_3,
  MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
  MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
  AVG(OTHERSTAT_3_VALUE) AVG_STAT_3, /* 35 */
  MAX(OTHERSTAT_4_ID) OTHERSTAT_4_ID,
  SUM(OTHERSTAT_4_VALUE) SUM_STAT_4,
  MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
  MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
  AVG(OTHERSTAT_4_VALUE) AVG_STAT_4, /* 40 */
  MAX(OTHERSTAT_5_ID) OTHERSTAT_5_ID,
  SUM(OTHERSTAT_5_VALUE) SUM_STAT_5,
  MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
  MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
  AVG(OTHERSTAT_5_VALUE) AVG_STAT_5, /* 45*/
  MAX(OTHERSTAT_6_ID) OTHERSTAT_6_ID,
  SUM(OTHERSTAT_6_VALUE) SUM_STAT_6,
  MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
  MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
  AVG(OTHERSTAT_6_VALUE) AVG_STAT_6 /* 50 */,
  TRUNCATE(AVG(DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNCATE(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNCATE(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
from
(
  select * FROM oceanbase.gv$sql_plan_monitor
where
  trace_id = '##REPLACE_TRACE_ID##'
) plan_monitor
LEFT JOIN
(
 SELECT ROWS, PLAN_LINE_ID FROM oceanbase.##REPLACE_PLAN_EXPLAIN_TABLE_NAME## WHERE plan_id = ##REPLACE_PLAN_ID## AND tenant_id = ##REPLACE_TENANT_ID## and svr_ip = '##REPLACE_SVR_IP##'  and svr_port = ##REPLACE_SVR_PORT##
) plan_explain
ON
  plan_monitor.PLAN_LINE_ID = plan_explain.PLAN_LINE_ID
GROUP BY
  plan_monitor.PLAN_LINE_ID, plan_monitor.PLAN_OPERATION
ORDER BY
  plan_monitor.PLAN_LINE_ID ASC;
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_svr_agg_template_oracle_obversion4",
    '''
SELECT
  PLAN_DEPTH,
  PLAN_LINE_ID,
  PLAN_OPERATION,
  COUNT(*) PARALLEL,
  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,
  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
  MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
  MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
  MIN(FIRST_REFRESH_TS) MIN_FIRST_REFRESH_TS,
  MAX(LAST_REFRESH_TS) MAX_LAST_REFRESH_TS,
  MIN(FIRST_CHANGE_TS) MIN_FIRST_CHANGE_TS,
  MAX(LAST_CHANGE_TS) MAX_LAST_CHANGE_TS,
  AVG(REFRESH_TS) AVG_REFRESH_TIME,
  MAX(REFRESH_TS) MAX_REFRESH_TIME,
  MIN(REFRESH_TS) MIN_REFRESH_TIME,
  AVG(CHANGE_TS) AVG_CHANGE_TIME,
  MAX(CHANGE_TS) MAX_CHANGE_TIME,
  MIN(CHANGE_TS) MIN_CHANGE_TIME,
  SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
  (MAX(LAST_CHANGE_TS-FIRST_CHANGE_TS) - MIN(LAST_CHANGE_TS-FIRST_CHANGE_TS)) / MAX(LAST_CHANGE_TS-FIRST_CHANGE_TS+0.00000001) SKEWNESS,
  SUM(STARTS) TOTAL_RESCAN_TIMES,
  SVR_IP,
  SVR_PORT,
  MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
  MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
  AVG(OTHERSTAT_1_VALUE) AVG_STAT_1,
  MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
  MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
  AVG(OTHERSTAT_2_VALUE) AVG_STAT_2,
  MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
  MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
  AVG(OTHERSTAT_3_VALUE) AVG_STAT_3,
  MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
  MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
  AVG(OTHERSTAT_4_VALUE) AVG_STAT_4,
  MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
  MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
  AVG(OTHERSTAT_5_VALUE) AVG_STAT_5,
  MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
  MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
  AVG(OTHERSTAT_6_VALUE) AVG_STAT_6,
  TRUNC(AVG(DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNC(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNC(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
FROM
(
select
  PLAN_DEPTH,
  SVR_IP,
  SVR_PORT,
  PLAN_LINE_ID,
  PLAN_OPERATION,
  OUTPUT_ROWS,
  STARTS,
  FIRST_REFRESH_TIME,
  LAST_REFRESH_TIME,
  FIRST_CHANGE_TIME,
  LAST_CHANGE_TIME,
  OTHERSTAT_1_VALUE,
  OTHERSTAT_2_VALUE,
  OTHERSTAT_3_VALUE,
  OTHERSTAT_4_VALUE,
  OTHERSTAT_5_VALUE,
  OTHERSTAT_6_VALUE,
  24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_REFRESH_TS,
  24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_REFRESH_TS,
  24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_CHANGE_TS,
  24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_CHANGE_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) REFRESH_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) CHANGE_TS,
  DB_TIME,
  USER_IO_WAIT_TIME
from
  sys.gv$sql_plan_monitor
  where
    trace_id = '##REPLACE_TRACE_ID##'
) tmp
GROUP BY
  PLAN_LINE_ID,PLAN_OPERATION,PLAN_DEPTH,SVR_IP,SVR_PORT
ORDER BY
  ##REPLACE_ORDER_BY##;
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_svr_agg_template_mysql_obversion4",
    '''
select
  PLAN_DEPTH,
  PLAN_LINE_ID,
  PLAN_OPERATION,
  COUNT(*) PARALLEL,
  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,
  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,
  MIN(FIRST_CHANGE_TIME) MIN_FIRST_CHANGE_TIME,
  MAX(LAST_CHANGE_TIME) MAX_LAST_CHANGE_TIME,
  UNIX_TIMESTAMP(MIN(FIRST_REFRESH_TIME)) MIN_FIRST_REFRESH_TS,
  UNIX_TIMESTAMP(MAX(LAST_REFRESH_TIME)) MAX_LAST_REFRESH_TS,
  UNIX_TIMESTAMP(MIN(FIRST_CHANGE_TIME)) MIN_FIRST_CHANGE_TS,
  UNIX_TIMESTAMP(MAX(LAST_CHANGE_TIME)) MAX_LAST_CHANGE_TS,
  AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) AVG_REFRESH_TIME,
  MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MAX_REFRESH_TIME,
  MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_REFRESH_TIME, LAST_REFRESH_TIME)) MIN_REFRESH_TIME,
  AVG(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) AVG_CHANGE_TIME,
  MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MAX_CHANGE_TIME,
  MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) MIN_CHANGE_TIME,
  SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
  (MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) - MIN(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME))) / MAX(TIMESTAMPDIFF(MICROSECOND, FIRST_CHANGE_TIME, LAST_CHANGE_TIME)) SKEWNESS,
  SUM(STARTS) TOTAL_RESCAN_TIMES,
  SVR_IP,
  SVR_PORT,
  MAX(OTHERSTAT_1_VALUE) MAX_STAT_1,
  MIN(OTHERSTAT_1_VALUE) MIN_STAT_1,
  AVG(OTHERSTAT_1_VALUE) AVG_STAT_1,
  MAX(OTHERSTAT_2_VALUE) MAX_STAT_2,
  MIN(OTHERSTAT_2_VALUE) MIN_STAT_2,
  AVG(OTHERSTAT_2_VALUE) AVG_STAT_2,
  MAX(OTHERSTAT_3_VALUE) MAX_STAT_3,
  MIN(OTHERSTAT_3_VALUE) MIN_STAT_3,
  AVG(OTHERSTAT_3_VALUE) AVG_STAT_3,
  MAX(OTHERSTAT_4_VALUE) MAX_STAT_4,
  MIN(OTHERSTAT_4_VALUE) MIN_STAT_4,
  AVG(OTHERSTAT_4_VALUE) AVG_STAT_4,
  MAX(OTHERSTAT_5_VALUE) MAX_STAT_5,
  MIN(OTHERSTAT_5_VALUE) MIN_STAT_5,
  AVG(OTHERSTAT_5_VALUE) AVG_STAT_5,
  MAX(OTHERSTAT_6_VALUE) MAX_STAT_6,
  MIN(OTHERSTAT_6_VALUE) MIN_STAT_6,
  AVG(OTHERSTAT_6_VALUE) AVG_STAT_6,
  TRUNCATE(AVG(DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNCATE(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNCATE(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
from
  oceanbase.gv$sql_plan_monitor
where
  trace_id = '##REPLACE_TRACE_ID##'
GROUP BY
  PLAN_LINE_ID,PLAN_OPERATION,SVR_IP,SVR_PORT
ORDER BY
  ##REPLACE_ORDER_BY##; 
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_db_time_mysql_template_obversion4",
    '''
SELECT  COUNT(1) THREAD_NUM, PLAN_LINE_ID, PLAN_DEPTH, PLAN_OPERATION, SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
   TRUNCATE(AVG(DB_TIME)/1000000000.0/2.5, 2) MY_DB_TIME,
   TRUNCATE(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 2) MY_CPU_TIME,
   TRUNCATE(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 2) MY_IO_TIME
FROM oceanbase.gv$sql_plan_monitor
WHERE trace_id = '##REPLACE_TRACE_ID##'
GROUP BY PLAN_LINE_ID, PLAN_OPERATION, PLAN_DEPTH
ORDER BY PLAN_LINE_ID
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_db_time_oracle_template_obversion4",
    '''
SELECT  COUNT(1) THREAD_NUM, PLAN_LINE_ID, PLAN_DEPTH, PLAN_OPERATION, SUM(OUTPUT_ROWS) TOTAL_OUTPUT_ROWS,
   TRUNC(AVG(DB_TIME)/1000000000.0/2.5, 2) MY_DB_TIME,
   TRUNC(AVG(DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 2) MY_CPU_TIME,
   TRUNC(AVG(USER_IO_WAIT_TIME)/1000000000.0/2.5, 2) MY_IO_TIME
FROM SYS.gv$sql_plan_monitor
WHERE trace_id = '##REPLACE_TRACE_ID##'
GROUP BY PLAN_LINE_ID, PLAN_OPERATION, PLAN_DEPTH
ORDER BY PLAN_LINE_ID
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_detail_template_oracle_obversion4",
    '''
select
  PLAN_DEPTH, /*0*/
  SVR_IP,
  SVR_PORT,
  PROCESS_NAME,
  PLAN_LINE_ID,
  PLAN_OPERATION,/*5*/
  OUTPUT_ROWS,
  STARTS RESCAN_TIMES,
  FIRST_REFRESH_TIME,
  LAST_REFRESH_TIME,
  FIRST_CHANGE_TIME,/*10*/
  LAST_CHANGE_TIME,
  24 * 3600 * extract(day FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_REFRESH_TS,
  24 * 3600 * extract(day FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_REFRESH_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_REFRESH_TS,
  24 * 3600 * extract(day FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM FIRST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) FIRST_CHANGE_TS,
  24 * 3600 * extract(day FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM LAST_CHANGE_TIME - TO_TIMESTAMP('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF')) LAST_CHANGE_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_REFRESH_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) REFRESH_TS,
  24 * 3600 * extract(day FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 3600 * extract(hour FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + 60 * extract(minute FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) + extract(second FROM TO_TIMESTAMP(LAST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') - TO_TIMESTAMP(FIRST_CHANGE_TIME, 'YYYY-MM-DD HH24:MI:SS.FF')) CHANGE_TS,
  OTHERSTAT_1_ID,
  OTHERSTAT_1_VALUE,
  OTHERSTAT_2_ID,/*20*/
  OTHERSTAT_2_VALUE,
  OTHERSTAT_3_ID,
  OTHERSTAT_3_VALUE,
  OTHERSTAT_4_ID,
  OTHERSTAT_4_VALUE,/*25*/
  OTHERSTAT_5_ID,
  OTHERSTAT_5_VALUE,
  OTHERSTAT_6_ID,
  OTHERSTAT_6_VALUE,
  TRUNC((DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNC((DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNC((USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
FROM
  sys.gv$sql_plan_monitor
WHERE
    trace_id = '##REPLACE_TRACE_ID##'
ORDER BY
  ##REPLACE_ORDER_BY##;
    ''',
)

sql_dict.set_value(
    "sql_plan_monitor_detail_template_mysql_obversion4",
    '''
select
  PLAN_DEPTH,/*0*/
  SVR_IP,
  SVR_PORT,
  PROCESS_NAME,
  PLAN_LINE_ID,
  PLAN_OPERATION, /*5*/
  OUTPUT_ROWS,
  STARTS RESCAN_TIMES,
  FIRST_REFRESH_TIME,
  LAST_REFRESH_TIME,
  FIRST_CHANGE_TIME,/*10*/
  LAST_CHANGE_TIME,
  UNIX_TIMESTAMP(FIRST_REFRESH_TIME) FIRST_REFRESH_TS,
  UNIX_TIMESTAMP(LAST_REFRESH_TIME) LAST_REFRESH_TS,
  UNIX_TIMESTAMP(LAST_REFRESH_TIME) - UNIX_TIMESTAMP(FIRST_REFRESH_TIME) REFRESH_TS,
  UNIX_TIMESTAMP(FIRST_CHANGE_TIME) FIRST_CHANGE_TS, /*15*/
  UNIX_TIMESTAMP(LAST_CHANGE_TIME) LAST_CHANGE_TS,
  UNIX_TIMESTAMP(LAST_CHANGE_TIME) - UNIX_TIMESTAMP(FIRST_CHANGE_TIME) CHANGE_TS,
  OTHERSTAT_1_ID,
  OTHERSTAT_1_VALUE,
  OTHERSTAT_2_ID, /*20*/
  OTHERSTAT_2_VALUE,
  OTHERSTAT_3_ID,
  OTHERSTAT_3_VALUE,
  OTHERSTAT_4_ID,
  OTHERSTAT_4_VALUE, /*25*/
  OTHERSTAT_5_ID,
  OTHERSTAT_5_VALUE,
  OTHERSTAT_6_ID,
  OTHERSTAT_6_VALUE,
  TRUNCATE((DB_TIME)/1000000000.0/2.5, 4) MY_DB_TIME,
  TRUNCATE((DB_TIME-USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_CPU_TIME,
  TRUNCATE((USER_IO_WAIT_TIME)/1000000000.0/2.5, 4) MY_IO_TIME
from
  oceanbase.gv$sql_plan_monitor
where
    trace_id = '##REPLACE_TRACE_ID##'
ORDER BY
  ##REPLACE_ORDER_BY##;
    ''',
)

sql_dict.set_value(
    "select_all_gv_database_view",
    '''
  SELECT /*+ READ_CONSISTENCY(WEAK) QUERY_TIMEOUT(60000000) */ 
  tenant_id, 
  tenant_name, 
  database_id, 
  database_name, 
  `comment`, 
  in_recyclebin 
  FROM  oceanbase.`gv$database`
    ''',
)

sql_dict.set_value(
    "select_cdb_database",
    '''
  SELECT/*+ QUERY_TIMEOUT(10000000) */ 
  con_id as tenant_id, 
  object_id as database_id, 
  object_name as database_name 
  FROM  oceanbase.cdb_objects 
  where 
  con_id = ##REPLACE_CON_ID## 
  and OBJECT_TYPE = 'DATABASE' 
    ''',
)

sql_dict.set_value(
    "select_tenant_cdb_database",
    '''
  SELECT/*+ QUERY_TIMEOUT(10000000) */ 
  con_id as tenant_id, 
  object_id as database_id, 
  object_name as database_name 
  FROM  oceanbase.DBA_OBJECTS 
  where OBJECT_TYPE = 'DATABASE' 
    ''',
)

sql_dict.set_value(
    "select_tenant_gv_database_view",
    '''
  SELECT /*+ READ_CONSISTENCY(WEAK) QUERY_TIMEOUT(60000000) */ 
  tenant_id, 
  tenant_name, 
  database_id, 
  database_name, 
  `comment`, 
  in_recyclebin 
  FROM  oceanbase.`gv$database` 
  WHERE tenant_id = ##REPLACE_TENANT_ID##
    ''',
)

sql_dict.set_value(
    "get_table_id",
    '''
  select 
  table_id 
  from oceanbase.gv$table 
  where 
  tenant_id = ##REPLACE_TENANT_ID##
  and database_id = ##REPLACE_DATABASE_ID## 
  and table_name = '##REPLACE_TABLE_NAME'
  limit 1
    ''',
)

sql_dict.set_value(
    "get_table_id_for_ob4",
    '''
  select 
  t3.table_id as table_id
  from 
    (select 
      con_id, 
      owner, 
      table_name, 
      partitioned 
      from oceanbase.CDB_TABLES) 
    t1 
  left join 
    (select 
      con_id, 
      owner, 
      object_name, 
      object_id 
      from oceanbase.CDB_OBJECTS 
      where object_type = 'database'
    ) t2 ON t1.con_id =t2.con_id and t1.owner = t2.owner 
  left join 
    (select 
      con_id, 
      owner, 
      object_name, 
      object_id as table_id 
      from oceanbase.CDB_OBJECTS where object_type = 'table'
    ) t3 ON t1.con_id = t3.con_id and t1.owner = t3.owner and t1.table_name = t3.object_name 
   where t1.con_id = ##REPLACE_CON_ID## and t2.object_id = ##REPLACE_OBJECT_ID## t1.table_name = ##REPLACE_TABLE_NAME## limit 1
    ''',
)

sql_dict.set_value(
    "get_table_index",
    '''
select 
  key_name as index_name, 
  group_concat(column_name order by seq_in_index separator ',') as column_name 
  from 
  oceanbase.__tenant_virtual_table_index 
  where 
  table_id = ##REPLACE_TABLE_ID##
  group by key_name
    ''',
)

sql_dict.set_value(
    "get_database_name",
    '''
select 
  database_name 
  from oceanbase.gv$database 
  where 
  tenant_id = ##REPLACE_TENANT_ID##
  and database_id = ##REPLACE_DATABASE_ID##
  limit 1
    ''',
)

sql_dict.set_value(
    "get_sql_audit_for_sql_review",
    '''
select /*+ READ_CONSISTENCY(WEAK) QUERY_TIMEOUT(120000000) */
  max(case when length(sql_id) > 0 then svr_ip else 0 end) as svrIp,
  max(case when length(sql_id) > 0 then svr_port else 0 end) as svrPort,
  max(case when length(sql_id) > 0 then request_id else 0 end) as requestId,
  max(case when length(sql_id) > 0 then client_ip else 0 end) as clientIp,
  max(case when length(sql_id) > 0 then tenant_name else 0 end) as tenantName,
  max(case when length(sql_id) > 0 then tenant_id else 0 end) as tenantId,
  max(case when length(sql_id) > 0 then db_name else 0 end) as dbName,
  max(case when length(sql_id) > 0 then db_id else 0 end) as dbId,
  max(case when length(sql_id) > 0 then query_sql else 0 end) as querySql,
  max(case when length(sql_id) > 0 then plan_id else 0 end) as planId,
  max(case when length(sql_id) > 0 then sql_id else '' end) as sqlId,
  max(case when length(sql_id) > 0 then trace_id else '' end) as traceId,
  min(request_time) as requestTime,
  sum(case when length(sql_id) > 0 then return_rows else 0 end) as returnRows,
  sum(case when length(sql_id) > 0 then affected_rows else 0 end) as affectedRows,
  sum(partition_cnt) as partitionCount,
  sum(case when length(sql_id) > 0 then ret_code else 0 end) as retCode,
  sum(case event when 'system internal wait' then WAIT_TIME_MICRO else 0 end) as event0WaitTimeUs,
  sum(case event when 'mysql response wait client' then WAIT_TIME_MICRO else 0 end) as event1WaitTimeUs,
  sum(case event when 'sync rpc' then WAIT_TIME_MICRO else 0 end) as event2WaitTimeUs,
  sum(case event when 'db file data read' then WAIT_TIME_MICRO else 0 end) as event3WaitTimeUs,
  sum(total_wait_time_micro) as totalWaitTimeMicro,
  sum(total_waits) as totalWaits,
  sum(rpc_count) as rpcCount,
  sum(case when length(sql_id) > 0 then plan_type else 0 end) as planType,
  sum(case when length(sql_id) > 0 then is_inner_sql else 0 end) as isInnerSql,
  sum(case when length(sql_id) > 0 then is_executor_rpc else 0 end) as isExecutorRpc,
  sum(case when length(sql_id) > 0 then is_hit_plan else 0 end) as isHitPlan,
  sum(case when length(sql_id) > 0 then elapsed_time else 0 end) as elapsedTime,
  sum(execute_time)-sum(total_wait_time_micro)+sum(get_plan_time) as cpuTime,
  sum(net_time) as netTime,
  sum(net_wait_time) as netWaitTime,
  sum(queue_time) as queueTime,
  sum(decode_time) as decodeTime,
  sum(get_plan_time) as getPlanTime,
  sum(execute_time) as executeTime,
  sum(application_wait_time) as applicationWaitTime,
  sum(concurrency_wait_time) as concurrencyWaitTime,
  sum(user_io_wait_time) as userIoWaitTime,
  sum(schedule_time) as scheduleTime,
  sum(row_cache_hit) as rowCacheHit,
  sum(bloom_filter_cache_hit) as bloomFilterCacheHit,
  sum(block_cache_hit) as blockCacheHit,
  sum(block_index_cache_hit) as blockIndexCacheHit,
  sum(disk_reads) as diskReads,
  sum(case when length(sql_id) > 0 then retry_cnt else 0 end) as retryCount,
  sum(case when length(sql_id) > 0 then table_scan else 0 end) as tableScan,
  sum(case when length(sql_id) > 0 then consistency_level else 0 end) as consistencyLevel,
  sum(memstore_read_row_count) as memstoreReadRowCount,
  sum(ssstore_read_row_count) as ssstoreReadRowCount
  from oceanbase.gv$sql_audit
  where  request_time >= ##REPLACE_REQUEST_FROM_TIME##
  and  request_time <= ##REPLACE_REQUEST_TO_TIME## 
  and length(sql_id) > 0 
  and length(query_sql) > 0 
  and length(db_name) > 0 
  and query_sql not like 'show%' 
  and query_sql not like 'alter%' 
  and query_sql not like 'set%' 
  and query_sql not like 'commit%' 
  and query_sql not like 'roll%' 
  and query_sql not like 'begin%' 
  and query_sql not like 'end%' 
  and query_sql not like 'drop%' 
  group by trace_id
  having elapsedTime >= ##REPLACE_ELAPSED_TIME##
  and length(sqlId) > 0
  limit ##REPLACE_LIMIT##
    ''',
)

sql_dict.set_value(
    "get_sql_audit_ob4_for_sql_review",
    '''
select /*+ READ_CONSISTENCY(WEAK) QUERY_TIMEOUT(120000000) */
  max(case when length(sql_id) > 0 then svr_ip else 0 end) as svrIp,
  max(case when length(sql_id) > 0 then svr_port else 0 end) as svrPort,
  max(case when length(sql_id) > 0 then request_id else 0 end) as requestId,
  max(case when length(sql_id) > 0 then client_ip else 0 end) as clientIp,
  max(case when length(sql_id) > 0 then tenant_name else 0 end) as tenantName,
  max(case when length(sql_id) > 0 then tenant_id else 0 end) as tenantId,
  max(case when length(sql_id) > 0 then db_name else 0 end) as dbName,
  max(case when length(sql_id) > 0 then db_id else 0 end) as dbId,
  max(case when length(sql_id) > 0 then query_sql else 0 end) as querySql,
  max(case when length(sql_id) > 0 then plan_id else 0 end) as planId,
  max(case when length(sql_id) > 0 then sql_id else '' end) as sqlId,
  max(case when length(sql_id) > 0 then trace_id else '' end) as traceId,
  min(request_time) as requestTime,
  sum(case when length(sql_id) > 0 then return_rows else 0 end) as returnRows,
  sum(case when length(sql_id) > 0 then affected_rows else 0 end) as affectedRows,
  sum(partition_cnt) as partitionCount,
  sum(case when length(sql_id) > 0 then ret_code else 0 end) as retCode,
  sum(case event when 'system internal wait' then WAIT_TIME_MICRO else 0 end) as event0WaitTimeUs,
  sum(case event when 'mysql response wait client' then WAIT_TIME_MICRO else 0 end) as event1WaitTimeUs,
  sum(case event when 'sync rpc' then WAIT_TIME_MICRO else 0 end) as event2WaitTimeUs,
  sum(case event when 'db file data read' then WAIT_TIME_MICRO else 0 end) as event3WaitTimeUs,
  sum(total_wait_time_micro) as totalWaitTimeMicro,
  sum(total_waits) as totalWaits,
  sum(rpc_count) as rpcCount,
  sum(case when length(sql_id) > 0 then plan_type else 0 end) as planType,
  sum(case when length(sql_id) > 0 then is_inner_sql else 0 end) as isInnerSql,
  sum(case when length(sql_id) > 0 then is_executor_rpc else 0 end) as isExecutorRpc,
  sum(case when length(sql_id) > 0 then is_hit_plan else 0 end) as isHitPlan,
  max(case when length(sql_id) > 0 then elapsed_time else 0 end) as elapsedTime,
  sum(execute_time) - sum(total_wait_time_micro) + max(get_plan_time) as cpuTime,
  sum(net_time) as netTime,
  sum(net_wait_time) as netWaitTime,
  sum(queue_time) as queueTime,
  sum(decode_time) as decodeTime,
  sum(get_plan_time) as getPlanTime,
  sum(execute_time) as executeTime,
  sum(application_wait_time) as applicationWaitTime,
  sum(concurrency_wait_time) as concurrencyWaitTime,
  sum(user_io_wait_time) as userIoWaitTime,
  sum(schedule_time) as scheduleTime,
  sum(row_cache_hit) as rowCacheHit,
  sum(bloom_filter_cache_hit) as bloomFilterCacheHit,
  sum(block_cache_hit) as blockCacheHit,
  0 as blockIndexCacheHit,
  sum(disk_reads) as diskReads,
  sum(case when length(sql_id) > 0 then retry_cnt else 0 end) as retryCount,
  sum(case when length(sql_id) > 0 then table_scan else 0 end) as tableScan,
  sum(case when length(sql_id) > 0 then consistency_level else 0 end) as consistencyLevel,
  sum(memstore_read_row_count) as memstoreReadRowCount,
  sum(ssstore_read_row_count) as ssstoreReadRowCount
  from oceanbase.gv$ob_sql_audit
  where tenant_name = '##REPLACE_TENANT_NAME##'
  and request_time >= ##REPLACE_REQUEST_FROM_TIME##
  and  request_time <= ##REPLACE_REQUEST_TO_TIME##
  and length(sql_id) > 0 
  and length(query_sql) > 0 
  and length(db_name) > 0 
  and query_sql not like 'show%' 
  and query_sql not like 'alter%' 
  and query_sql not like 'set%' 
  and query_sql not like 'commit%' 
  and query_sql not like 'roll%' 
  and query_sql not like 'begin%' 
  and query_sql not like 'end%' 
  and query_sql not like 'drop%' 
  and query_sql not like 'commit%' 
  and query_sql not like 'select 1%' 
  group by trace_id
  having elapsedTime >= ##REPLACE_ELAPSED_TIME##
  and length(sqlId) > 0
  limit ##REPLACE_LIMIT##
    ''',
)

sql_dict.set_value(
    "get_plan_explains",
    '''
select /*+ READ_CONSISTENCY(WEAK) */ 
  plan_depth as planDepth, 
  plan_line_id as planLineId, 
  operator, name as objectName 
  from 
  oceanbase.gv$plan_cache_plan_explain 
  where 
  tenant_id = ##REPLACE_TENANT_ID## and ip = '##REPLACE_SVR_IP##' and port = ##REPLACE_SVR_PORT## and plan_id = ##REPLACE_PLAN_ID##
    ''',
)

sql_dict.set_value(
    "get_plan_explains_for_ob4",
    '''
select /*+ READ_CONSISTENCY(WEAK) */ 
  plan_depth as planDepth, 
  plan_line_id as planLineId, 
  operator, 
  name as objectName,
  rows,
  cost
  from 
  oceanbase.gv$ob_plan_cache_plan_explain 
  where 
  tenant_id = ##REPLACE_TENANT_ID## and svr_ip = '##REPLACE_SVR_IP##' and svr_port = ##REPLACE_SVR_PORT## and 
  plan_id = ##REPLACE_PLAN_ID##
    ''',
)

sql_dict.set_value(
    "get_tables",
    '''
select 
  table_name as tableName, 
  table_id as tableId 
  from oceanbase.gv$table 
  where database_name = '##REPLACE_DATABASE_NAME##' limit 1
    ''',
)

sql_dict.set_value(
    "get_tables_for_ob4",
    '''
select 
  table_schema databaseName, 
  table_name tableName 
  from information_schema.tables  
  where table_schema = '##REPLACE_DATABASE_NAME##' and table_type='BASE TABLE' limit 1
    ''',
)

sql_dict.set_value(
    "get_tenants",
    '''
select 
  tenant_name as tenantName, 
  tenant_id as tenantId 
  from oceanbase.gv$tenant
    ''',
)

sql_dict.set_value(
    "get_colum_list_on_lower_version",
    '''
select  /*+ READ_CONSISTENCY(weak),leading(a,b) use_hash(a,b) */
  b.data_type dataType, 
  a.column_id columnId,
  b.column_name columnName ,
  max(a.num_distinct) ndvCount 
  FROM 
  oceanbase.__all_column_statistic a,
  oceanbase.__all_column b 
  WHERE 
  a.tenant_id=b.tenant_id 
  and a.table_id=b.table_id 
  and a.column_id=b.column_id 
  and b.column_name not like '%__substr%' 
  and a.tenant_id=##REPLACE_TENANT_ID## and a.table_id=##REPLACE_TABLE_ID## 
    ''',
)

sql_dict.set_value(
    "get_colum_list",
    '''
select  /*+ READ_CONSISTENCY(weak),leading(a,b) use_hash(a,b) */
  b.data_type dataType, 
  a.column_id columnId, 
  b.column_name columnName,
  max(a.num_distinct) ndvCount
  FROM 
  oceanbase.__all_virtual_column_statistic a,
  oceanbase.__all_virtual_column b 
  WHERE 
  a.tenant_id=b.tenant_id 
  and a.table_id=b.table_id 
  and a.column_id=b.column_id 
  and b.column_name not like '%__substr%' 
  and a.tenant_id=##REPLACE_TENANT_ID## and a.table_id=##REPLACE_TABLE_ID##
  GROUP BY b.column_name
    ''',
)

sql_dict.set_value(
    "get_column_min_and_max_value_list_on_lower_version",
    '''
select /*+ READ_CONSISTENCY(weak),leading(a,b) use_hash(a,b) */
 column_id columnId, 
 des_hex_str(case min_value when '19070000FDFFFFFFFFFFFFFFFF01' then '0' else min_value end) `minValue`,
 des_hex_str(case max_value when '19070000FEFFFFFFFFFFFFFFFF01' then '0' else max_value end) `maxValue` 
 from 
 oceanbase.__all_column_statistic 
 where tenant_id = ##REPLACE_TENANT_ID## and table_id = ##REPLACE_TABLE_ID##
    ''',
)

sql_dict.set_value(
    "get_column_min_and_max_value_list",
    '''
select /*+ READ_CONSISTENCY(weak),leading(a,b) use_hash(a,b) */
 column_id columnId, 
 des_hex_str(case min_value when '19070000FDFFFFFFFFFFFFFFFF01' then '0' else min_value end) `minValue`,
 des_hex_str(case max_value when '19070000FEFFFFFFFFFFFFFFFF01' then '0' else max_value end) `maxValue` 
 from 
 oceanbase.__all_virtual_column_statistic 
 where 
 tenant_id = ##REPLACE_TENANT_ID## and table_id = ##REPLACE_TABLE_ID##
    ''',
)

sql_dict.set_value(
    "get_tenant_name_list",
    '''
    select tenant_name from oceanbase.__all_tenant;
    ''',
)

sql_dict.set_value(
    "get_tenant_name_list_for_v4",
    '''
    SELECT tenant_name FROM oceanbase.DBA_OB_TENANTS where TENANT_TYPE != 'META';
    ''',
)
